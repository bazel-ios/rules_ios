load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("//rules:framework.bzl", "apple_framework")
load(":tests.bzl", "xcconfig_unit_test_suite")

SRCS = [
    "empty.m",
    "empty.swift",
]

apple_framework(
    name = "empty_xcconfig",
    srcs = SRCS,
    xcconfig = {},
)

apple_framework(
    name = "unknown_key_xcconfig",
    srcs = SRCS,
    xcconfig = {
        "MY_MADEUP_SETTING": "NEVER",
    },
)

apple_framework(
    name = "boolean_key_xcconfig",
    srcs = SRCS,
    xcconfig = {
        "GCC_TREAT_WARNINGS_AS_ERRORS": "YES",
    },
)

apple_framework(
    name = "array_key_xcconfig",
    srcs = SRCS,
    xcconfig = {
        "GCC_PREPROCESSOR_DEFINITIONS": [
            "FOO",
            "BAR=1",
            "ABCD=HAS SO MANY SPACES",
        ],
    },
)

apple_framework(
    name = "wont_build_without_xcconfig",
    non_arc_srcs = ["weak_property.m"],
    xcconfig = {
        "CLANG_ENABLE_OBJC_WEAK": "YES",
    },
)

apple_framework(
    name = "used_as_condition_xcconfig",
    srcs = [
        "objc_imports_swift_internal.m",
        "swift_internal.swift",
    ],
    xcconfig = {
        "APPLICATION_EXTENSION_API_ONLY": "YES",
    },
)

# Configurable xcconfig
#
string_flag(
    name = "flavor",
    build_setting_default = "blue",
)

[
    config_setting(
        name = build_setting,
        flag_values = {
            ":flavor": build_setting,
        },
    )
    for build_setting in [
        "red",
        "blue",
    ]
]

apple_framework(
    name = "configurable_xcconfig",
    srcs = SRCS,
    xcconfig = {
        "FOO": "YES",
        "GCC_TREAT_WARNINGS_AS_ERRORS": "YES",
    },
    xcconfig_by_build_setting = {
        ":blue": {
            "FOO": "NO",
            "FOO_blue": "blue",
            "GCC_TREAT_WARNINGS_AS_ERRORS": "YES",
        },
        ":red": {
            "FOO": "NO",
            "FOO_red": "red",
            "GCC_TREAT_WARNINGS_AS_ERRORS": "NO",
        },
    },
)

xcconfig_unit_test_suite()
