#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MISNAPCORE_SWIFT_H
#define MISNAPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSData;
enum MiSnapCryptographyHashingAlgorithm : NSInteger;

SWIFT_CLASS("_TtC10MiSnapCore18MiSnapCryptography")
@interface MiSnapCryptography : NSObject
- (nonnull instancetype)initWithPublicKey:(SecKeyRef _Nullable)publicKey privateKey:(SecKeyRef _Nullable)privateKey algorithm:(SecKeyAlgorithm _Nonnull)algorithm OBJC_DESIGNATED_INITIALIZER;
- (void)setWithPublicKey:(SecKeyRef _Nullable)publicKey privateKey:(SecKeyRef _Nullable)privateKey;
- (NSArray<NSString *> * _Nullable)encryptDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decryptToDictionary:(NSArray<NSString *> * _Nonnull)base64Strings SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)encryptData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decryptData:(NSArray<NSString *> * _Nonnull)base64Strings SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)encrypt:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decrypt:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)hash:(NSData * _Nullable)data algorithm:(enum MiSnapCryptographyHashingAlgorithm)algorithm SWIFT_WARN_UNUSED_RESULT;
+ (SecKeyRef _Nullable)secKeyFrom:(NSData * _Nonnull)data parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MiSnapCryptographyHashingAlgorithm, open) {
  MiSnapCryptographyHashingAlgorithmSha224 = 0,
  MiSnapCryptographyHashingAlgorithmSha256 = 1,
  MiSnapCryptographyHashingAlgorithmSha384 = 2,
  MiSnapCryptographyHashingAlgorithmSha512 = 3,
};


SWIFT_CLASS("_TtC10MiSnapCore12MiSnapDevice")
@interface MiSnapDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A device ID
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Model name
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
/// OS version
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// An array of base64 strings that represents an encrypted device info
@property (nonatomic, readonly, copy) NSString * _Nullable info;
@end


/// Licensed feature
typedef SWIFT_ENUM(NSInteger, MiSnapLicenseFeature, open) {
/// Feature is not set
  MiSnapLicenseFeatureNone = 0,
/// Generic
/// Allows invoking Generic document type
  MiSnapLicenseFeatureGeneric = 1,
/// Deposit
/// Allows invoking Check Front and Check Back document types
  MiSnapLicenseFeatureDeposit = 2,
/// Barcode
/// Allows scanning barcodes
  MiSnapLicenseFeatureBarcode = 3,
/// ID
/// Allows invoking ID Front and Back, Passport document types
  MiSnapLicenseFeatureId = 4,
/// On-Device Classification
/// When enabled:
/// <ul>
///   <li>
///     In combination with <code>MiSnapLicenseFeatureId</code> allows invoking Any ID to acquire an image of any supported identity document
///   </li>
///   <li>
///     Prevents capturing 2 sides of the same identity document and some unsupported documents
///   </li>
/// </ul>
  MiSnapLicenseFeatureODC = 5,
/// On-Device Extraction
/// When enabled, returns parsed information from supported identity documents
  MiSnapLicenseFeatureODE = 6,
/// Near Field Communication
/// Allows invoking MiSnapNFC SDK
  MiSnapLicenseFeatureNFC = 7,
/// Face
/// Allows invoking MiSnapFacialCapture SDK
  MiSnapLicenseFeatureFace = 8,
/// Voice
/// Allows invoking MiSnapVoiceCapture SDK
  MiSnapLicenseFeatureVoice = 9,
/// Enhanced Manual
/// When enabled, returns hints after processing a frame in Manual mode
  MiSnapLicenseFeatureEnhancedManual = 10,
};

enum MiSnapLicenseStatus : NSInteger;

SWIFT_CLASS("_TtC10MiSnapCore20MiSnapLicenseManager")
@interface MiSnapLicenseManager : NSObject
/// Singleton instance
/// @return The <code>MiSnapLicenseManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MiSnapLicenseManager * _Nonnull shared;)
+ (MiSnapLicenseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Destroys the singleton
+ (void)destroyShared;
/// License status.
/// @see <code>MiSnapLicenseStatus</code>
@property (nonatomic, readonly) enum MiSnapLicenseStatus status;
/// GPO (a private property internally used by Mitek)
@property (nonatomic, readonly, copy) NSString * _Nullable gpo;
/// A string representation of an expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expirationDateString;
/// Sets a base64 license key
- (void)setLicenseKey:(NSString * _Nullable)base64LicenseKey;
/// Returns whether a given feature is supported by a license key
- (BOOL)featureSupported:(enum MiSnapLicenseFeature)feature SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, MiSnapLicenseStatus, open) {
/// License status is not set
  MiSnapLicenseStatusNone = 0,
/// License is valid
  MiSnapLicenseStatusValid = 1,
/// License is tampered with
  MiSnapLicenseStatusNotValid = 2,
/// License is valid but expired
  MiSnapLicenseStatusExpired = 3,
/// License is valid but disabled
  MiSnapLicenseStatusDisabled = 4,
/// License is valid but an application bundle identifier is not supported
  MiSnapLicenseStatusNotValidAppId = 5,
/// License is valid but iOS platform is not licensed
  MiSnapLicenseStatusPlatformNotSupported = 6,
/// License is valid but a given feature is not supported
  MiSnapLicenseStatusFeatureNotSupported = 7,
};

@class MiSnapLogConfiguration;

SWIFT_CLASS("_TtC10MiSnapCore9MiSnapLog")
@interface MiSnapLog : NSObject
@property (nonatomic, strong) MiSnapLogConfiguration * _Nonnull configuration;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MiSnapLog * _Nonnull shared;)
+ (MiSnapLog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)destroyShared;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MiSnapLogConfiguration * _Nonnull configuration;)
+ (MiSnapLogConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfiguration:(MiSnapLogConfiguration * _Nonnull)value;
- (void)verbose:(NSString * _Nonnull)msg;
- (void)debug:(NSString * _Nonnull)msg;
- (void)info:(NSString * _Nonnull)msg;
- (void)warning:(NSString * _Nonnull)msg;
- (void)error:(NSString * _Nonnull)msg;
- (NSString * _Nonnull)getLogWithKeepFile:(BOOL)keepFile;
- (void)clearAllSavedLogFiles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MiSnapLogLevel : NSInteger;
enum MiSnapLogPresentation : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC10MiSnapCore22MiSnapLogConfiguration")
@interface MiSnapLogConfiguration : NSObject <NSCoding>
/// Level
@property (nonatomic) enum MiSnapLogLevel level;
/// Presentation
@property (nonatomic) enum MiSnapLogPresentation presentation;
/// Indicates whether PII should be saved
/// Default: <code>false</code>
@property (nonatomic) BOOL savePII;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

/// Log level
typedef SWIFT_ENUM(NSInteger, MiSnapLogLevel, open) {
/// Verbose
  MiSnapLogLevelVerbose = 0,
/// Debug
  MiSnapLogLevelDebug = 1,
/// Info
  MiSnapLogLevelInfo = 2,
/// Warning
  MiSnapLogLevelWarning = 3,
/// Error
  MiSnapLogLevelError = 4,
};

/// Log presentation
typedef SWIFT_ENUM(NSInteger, MiSnapLogPresentation, open) {
/// Only print logs in console
  MiSnapLogPresentationConsole = 0,
/// Only save logs to a file
  MiSnapLogPresentationFile = 1,
/// Print logs to console and save to file
  MiSnapLogPresentationConsoleAndFile = 2,
};

@class MiSnapMibiDeviceInfo;
@class MiSnapMibiSessionInfo;
enum MiSnapMibiDataElement : NSInteger;
@class UIImage;

/// MIBI
SWIFT_CLASS("_TtC10MiSnapCore10MiSnapMibi")
@interface MiSnapMibi : NSObject
/// JSON string representation of MIBI.
/// WARNING: Do not use/parse it for a purpose of collecting session analytics as this property is only for Mitek internal use. Use stable <code>sessionInfo</code> and <code>deviceInfo</code> properties for this purpose.
@property (nonatomic, copy) NSString * _Nullable string;
/// Device info
@property (nonatomic, readonly, strong) MiSnapMibiDeviceInfo * _Nonnull deviceInfo;
/// An array of session infos
@property (nonatomic, readonly, copy) NSArray<MiSnapMibiSessionInfo *> * _Nonnull sessionInfos;
/// Deep copy
@property (nonatomic, readonly, strong) MiSnapMibi * _Nonnull deepCopy;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set a module name and its version
- (void)setModuleWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version;
/// Set a session info dictionary
- (void)setSessionInfo:(NSDictionary<NSString *, id> * _Nonnull)sessionInfo resetOld:(BOOL)resetOld;
/// Set a value for MIBI data element
- (void)setWithValue:(NSString * _Nonnull)value for:(enum MiSnapMibiDataElement)element;
/// Set parameters
- (void)setParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters original:(BOOL)original;
/// Set UXP
/// Note, should always be called at the very end to finilize all internal MIBI objects
- (void)setUXP:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)events;
/// Add MIBI string to an image
- (NSData * _Nullable)addTo:(UIImage * _Nullable)image compression:(float)compression SWIFT_WARN_UNUSED_RESULT;
/// Add MIBI string to WAV data
- (NSData * _Nonnull)addTo:(NSData * _Nonnull)wavData SWIFT_WARN_UNUSED_RESULT;
@end


enum MiSnapMibiSessionInfoType : NSInteger;

/// Session info
SWIFT_CLASS("_TtC10MiSnapCore21MiSnapMibiSessionInfo")
@interface MiSnapMibiSessionInfo : NSObject
/// Type
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoType type;
/// Total duration
@property (nonatomic, readonly) NSInteger totalDuration;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MiSnapMibiSessionInfoMode : NSInteger;
enum MiSnapMibiSessionInfoOrientation : NSInteger;

/// Barcode session info
SWIFT_CLASS("_TtC10MiSnapCore28MiSnapMibiBarcodeSessionInfo")
@interface MiSnapMibiBarcodeSessionInfo : MiSnapMibiSessionInfo
/// Barcode type
@property (nonatomic, readonly, copy) NSString * _Nonnull barcodeType;
/// Mode
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoMode mode;
/// Device orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation deviceOrientation;
/// Document orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation documentOrientation;
/// JPEG quality
@property (nonatomic, readonly) NSInteger jpegQuality;
/// Auto tries
@property (nonatomic, readonly) NSInteger autoTries;
/// Manual tries
@property (nonatomic, readonly) NSInteger manualTries;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiBarcodeSessionInfo</code> from a dictionary
+ (MiSnapMibiBarcodeSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// MIBI data element
typedef SWIFT_ENUM(NSInteger, MiSnapMibiDataElement, open) {
/// MIBI version
  MiSnapMibiDataElementMibiVersion = 0,
/// Device info
  MiSnapMibiDataElementDeviceInfo = 1,
/// SDK info
  MiSnapMibiDataElementSdkInfo = 2,
/// Platform private
  MiSnapMibiDataElementPlatformPrivate = 3,
/// Session info
  MiSnapMibiDataElementSessionInfo = 4,
/// Device
  MiSnapMibiDataElementDevice = 5,
/// Manufacturer
  MiSnapMibiDataElementManufacturer = 6,
/// Model
  MiSnapMibiDataElementModel = 7,
/// Platfrom
  MiSnapMibiDataElementPlatform = 8,
/// OS
  MiSnapMibiDataElementOs = 9,
/// ID
  MiSnapMibiDataElementId = 10,
/// Modules
  MiSnapMibiDataElementModules = 11,
/// Name
  MiSnapMibiDataElementName = 12,
/// Version
  MiSnapMibiDataElementVersion = 13,
/// License
  MiSnapMibiDataElementLicense = 14,
/// GPO
  MiSnapMibiDataElementGpo = 15,
/// ExpiryDate
  MiSnapMibiDataElementExpiryDate = 16,
/// Parameters
  MiSnapMibiDataElementParameters = 17,
/// Original
  MiSnapMibiDataElementOriginal = 18,
/// Final
  MiSnapMibiDataElementFinal = 19,
/// UXP
  MiSnapMibiDataElementUxp = 20,
/// Result code
  MiSnapMibiDataElementResultCode = 21,
/// Image width
  MiSnapMibiDataElementImageWidth = 22,
/// Image height
  MiSnapMibiDataElementImageHeight = 23,
/// Orientation
  MiSnapMibiDataElementOrientation = 24,
/// Classification document type
  MiSnapMibiDataElementClassificationDocumentType = 25,
};


/// Device info
SWIFT_CLASS("_TtC10MiSnapCore20MiSnapMibiDeviceInfo")
@interface MiSnapMibiDeviceInfo : NSObject
/// Manufacturer
@property (nonatomic, readonly, copy) NSString * _Nonnull manufacturer;
/// Device (i.e. iPhone or iPad)
@property (nonatomic, readonly, copy) NSString * _Nonnull device;
/// Model
@property (nonatomic, readonly, copy) NSString * _Nonnull model;
/// OS
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Document session info
SWIFT_CLASS("_TtC10MiSnapCore29MiSnapMibiDocumentSessionInfo")
@interface MiSnapMibiDocumentSessionInfo : MiSnapMibiSessionInfo
/// Doc type
@property (nonatomic, readonly, copy) NSString * _Nonnull docType;
/// Mode
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoMode mode;
/// Device orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation deviceOrientation;
/// Document orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation documentOrientation;
/// JPEG quality
@property (nonatomic, readonly) NSInteger jpegQuality;
/// Auto tries
@property (nonatomic, readonly) NSInteger autoTries;
/// Manual tries
@property (nonatomic, readonly) NSInteger manualTries;
/// Enhanced manual
@property (nonatomic, readonly) BOOL enhancedManual;
/// Classification type
@property (nonatomic, readonly, copy) NSString * _Nullable classificationType;
/// Four corners
@property (nonatomic, readonly, copy) NSArray<NSArray<NSNumber *> *> * _Nullable fourCorners;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable warnings;
/// MRZ extracted
@property (nonatomic, readonly) BOOL mrzExtracted;
/// Optional data redacted
@property (nonatomic, readonly) BOOL optionalDataRedacted;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiDocumentSessionInfo</code> from a dictionary
+ (MiSnapMibiDocumentSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face session info
SWIFT_CLASS("_TtC10MiSnapCore25MiSnapMibiFaceSessionInfo")
@interface MiSnapMibiFaceSessionInfo : MiSnapMibiSessionInfo
/// Mode
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoMode mode;
/// Smile
@property (nonatomic, readonly) BOOL smile;
/// Device orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation deviceOrientation;
/// JPEG quality
@property (nonatomic, readonly) NSInteger jpegQuality;
/// Auto tries
@property (nonatomic, readonly) NSInteger autoTries;
/// Manual tries
@property (nonatomic, readonly) NSInteger manualTries;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable warnings;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiFaceSessionInfo</code> from a dictionary
+ (MiSnapMibiFaceSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum MiSnapMibiSessionInfoUnlock : NSInteger;

/// NFC session info
SWIFT_CLASS("_TtC10MiSnapCore24MiSnapMibiNFCSessionInfo")
@interface MiSnapMibiNFCSessionInfo : MiSnapMibiSessionInfo
/// Tries
@property (nonatomic, readonly) NSInteger tries;
/// Unlock mechanism
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoUnlock unlock;
/// Chip Authentication
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable ca;
/// Data groups
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable dgs;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSArray<NSString *> *> * _Nullable warnings;
/// Document code
@property (nonatomic, readonly, copy) NSString * _Nullable documentCode;
/// Issuing country
@property (nonatomic, readonly, copy) NSString * _Nullable issuingCountry;
/// Issue date
@property (nonatomic, readonly, copy) NSString * _Nullable issueDate;
/// Nationality
@property (nonatomic, readonly, copy) NSString * _Nullable nationality;
/// Optional data redacted
@property (nonatomic, readonly) BOOL optionalDataRedacted;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiNFCSessionInfo</code> from a dictionary
+ (MiSnapMibiNFCSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Session info flow
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoFlow, open) {
/// Flow is not set
  MiSnapMibiSessionInfoFlowNone = 0,
/// Enrollment
  MiSnapMibiSessionInfoFlowEnrollment = 1,
/// Verification
  MiSnapMibiSessionInfoFlowVerification = 2,
};

/// Session info mode
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoMode, open) {
/// Mode is not set
  MiSnapMibiSessionInfoModeNone = 0,
/// Auto
  MiSnapMibiSessionInfoModeAuto = 1,
/// Manual
  MiSnapMibiSessionInfoModeManual = 2,
/// Forced auto
  MiSnapMibiSessionInfoModeForcedAuto = 3,
};

/// Session info orientation
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoOrientation, open) {
/// Orientation is not set
  MiSnapMibiSessionInfoOrientationNone = 0,
/// Portrait
  MiSnapMibiSessionInfoOrientationPortrait = 1,
/// Landscape
  MiSnapMibiSessionInfoOrientationLandscape = 2,
};

/// Session info type
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoType, open) {
/// Type is not set
  MiSnapMibiSessionInfoTypeNone = 0,
/// Document
  MiSnapMibiSessionInfoTypeDocument = 1,
/// Barcode
  MiSnapMibiSessionInfoTypeBarcode = 2,
/// Face
  MiSnapMibiSessionInfoTypeFace = 3,
/// Voice
  MiSnapMibiSessionInfoTypeVoice = 4,
/// NFC
  MiSnapMibiSessionInfoTypeNfc = 5,
};

/// Session info chip unlock mechanism
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoUnlock, open) {
/// Unlock mechanism is not set
  MiSnapMibiSessionInfoUnlockNone = 0,
/// PACE
  MiSnapMibiSessionInfoUnlockPace = 1,
/// CA
  MiSnapMibiSessionInfoUnlockCa = 2,
/// BAC
  MiSnapMibiSessionInfoUnlockBac = 3,
};


/// Voice session info
SWIFT_CLASS("_TtC10MiSnapCore26MiSnapMibiVoiceSessionInfo")
@interface MiSnapMibiVoiceSessionInfo : MiSnapMibiSessionInfo
/// Flow
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoFlow flow;
/// Tries
@property (nonatomic, readonly) NSInteger tries;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSArray<NSString *> *> * _Nullable warnings;
/// SNR
@property (nonatomic, readonly) float snr;
/// Speech duration
@property (nonatomic, readonly) NSInteger speechDuration;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiVoiceSessionInfo</code> from a dictionary
+ (MiSnapMibiVoiceSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(NSInteger, MiSnapUxpEvent, open) {
  MiSnapUxpEventNone = 0,
  MiSnapUxpEventCheckFrontFailure = 1,
  MiSnapUxpEventCheckBackFailure = 2,
  MiSnapUxpEventIdentityFrontFailure = 3,
  MiSnapUxpEventIdentityBackFailure = 4,
  MiSnapUxpEventPassportFailure = 5,
  MiSnapUxpEventNotFoundFailure = 6,
  MiSnapUxpEventMrzFailure = 7,
  MiSnapUxpEventContrastFailure = 8,
  MiSnapUxpEventBackgroundFailure = 9,
  MiSnapUxpEventAngleFailure = 10,
  MiSnapUxpEventRotationAngleFailure = 11,
  MiSnapUxpEventTooFarFailure = 12,
  MiSnapUxpEventTooCloseFailure = 13,
  MiSnapUxpEventAspectRatioFailure = 14,
  MiSnapUxpEventSharpnessFailure = 15,
  MiSnapUxpEventBrightnessFailure = 16,
  MiSnapUxpEventMaxBrightnessFailure = 17,
  MiSnapUxpEventGlareFailure = 18,
  MiSnapUxpEventClassificationInProgress = 19,
  MiSnapUxpEventFaceNotFoundFailure = 20,
  MiSnapUxpEventFaceNotCenteredFailure = 21,
  MiSnapUxpEventFaceMultipleFacesFailure = 22,
  MiSnapUxpEventFaceRollFailure = 23,
  MiSnapUxpEventFacePitchFailure = 24,
  MiSnapUxpEventFaceYawFailure = 25,
  MiSnapUxpEventFaceTooFarFailure = 26,
  MiSnapUxpEventFaceTooCloseFailure = 27,
  MiSnapUxpEventFaceNotStillFailure = 28,
  MiSnapUxpEventFaceStopSmilingFailure = 29,
  MiSnapUxpEventHoldStill = 30,
  MiSnapUxpEventSmile = 31,
  MiSnapUxpEventErrorVerbose = 32,
  MiSnapUxpEventSuccessVerbose = 33,
  MiSnapUxpEventTimeoutVerbose = 34,
  MiSnapUxpEventStartVerbose = 35,
  MiSnapUxpEventReadVerbose = 36,
  MiSnapUxpEventUnknownTagVerbose = 37,
  MiSnapUxpEventPaceSupportVerbose = 38,
  MiSnapUxpEventCaSupportVerbose = 39,
  MiSnapUxpEventAaSupportVerbose = 40,
  MiSnapUxpEventAccessMechanismVerbose = 41,
  MiSnapUxpEventDiscardVerbose = 42,
  MiSnapUxpEventCancelVerbose = 43,
  MiSnapUxpEventCancel = 44,
  MiSnapUxpEventInstruction = 45,
  MiSnapUxpEventHelp = 46,
  MiSnapUxpEventTimeout = 47,
  MiSnapUxpEventReview = 48,
  MiSnapUxpEventMeasuredConfidence = 49,
  MiSnapUxpEventMeasuredCornerPoints = 50,
  MiSnapUxpEventMeasuredMicrConfidence = 51,
  MiSnapUxpEventMeasuredContrast = 52,
  MiSnapUxpEventMeasuredBackground = 53,
  MiSnapUxpEventMeasuredAngle = 54,
  MiSnapUxpEventMeasuredRotationAngle = 55,
  MiSnapUxpEventMeasuredSharpness = 56,
  MiSnapUxpEventMeasuredBrightness = 57,
  MiSnapUxpEventMeasuredGlare = 58,
  MiSnapUxpEventMeasuredWidth = 59,
  MiSnapUxpEventMeasuredAutoTime = 60,
  MiSnapUxpEventMeasuredManualTime = 61,
  MiSnapUxpEventMeasuredFailover = 62,
  MiSnapUxpEventTorchOn = 63,
  MiSnapUxpEventTorchOff = 64,
  MiSnapUxpEventStartAuto = 65,
  MiSnapUxpEventStartManual = 66,
  MiSnapUxpEventOrientationLandscape = 67,
  MiSnapUxpEventOrientationPortrait = 68,
};


SWIFT_CLASS("_TtC10MiSnapCore21MiSnapUxpEventManager")
@interface MiSnapUxpEventManager : NSObject
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nonnull events;
@property (nonatomic, readonly) NSInteger totalDuration;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MiSnapUxpEventManager * _Nonnull shared;)
+ (MiSnapUxpEventManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)destroyShared;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)addEvent:(enum MiSnapUxpEvent)event;
- (void)addEvent:(enum MiSnapUxpEvent)event value:(NSString * _Nullable)value;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MISNAPCORE_SWIFT_H
#define MISNAPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSData;
enum MiSnapCryptographyHashingAlgorithm : NSInteger;

SWIFT_CLASS("_TtC10MiSnapCore18MiSnapCryptography")
@interface MiSnapCryptography : NSObject
- (nonnull instancetype)initWithPublicKey:(SecKeyRef _Nullable)publicKey privateKey:(SecKeyRef _Nullable)privateKey algorithm:(SecKeyAlgorithm _Nonnull)algorithm OBJC_DESIGNATED_INITIALIZER;
- (void)setWithPublicKey:(SecKeyRef _Nullable)publicKey privateKey:(SecKeyRef _Nullable)privateKey;
- (NSArray<NSString *> * _Nullable)encryptDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)decryptToDictionary:(NSArray<NSString *> * _Nonnull)base64Strings SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)encryptData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decryptData:(NSArray<NSString *> * _Nonnull)base64Strings SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)encrypt:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decrypt:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)hash:(NSData * _Nullable)data algorithm:(enum MiSnapCryptographyHashingAlgorithm)algorithm SWIFT_WARN_UNUSED_RESULT;
+ (SecKeyRef _Nullable)secKeyFrom:(NSData * _Nonnull)data parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MiSnapCryptographyHashingAlgorithm, open) {
  MiSnapCryptographyHashingAlgorithmSha224 = 0,
  MiSnapCryptographyHashingAlgorithmSha256 = 1,
  MiSnapCryptographyHashingAlgorithmSha384 = 2,
  MiSnapCryptographyHashingAlgorithmSha512 = 3,
};


SWIFT_CLASS("_TtC10MiSnapCore12MiSnapDevice")
@interface MiSnapDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A device ID
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Model name
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
/// OS version
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
/// An array of base64 strings that represents an encrypted device info
@property (nonatomic, readonly, copy) NSString * _Nullable info;
@end


/// Licensed feature
typedef SWIFT_ENUM(NSInteger, MiSnapLicenseFeature, open) {
/// Feature is not set
  MiSnapLicenseFeatureNone = 0,
/// Generic
/// Allows invoking Generic document type
  MiSnapLicenseFeatureGeneric = 1,
/// Deposit
/// Allows invoking Check Front and Check Back document types
  MiSnapLicenseFeatureDeposit = 2,
/// Barcode
/// Allows scanning barcodes
  MiSnapLicenseFeatureBarcode = 3,
/// ID
/// Allows invoking ID Front and Back, Passport document types
  MiSnapLicenseFeatureId = 4,
/// On-Device Classification
/// When enabled:
/// <ul>
///   <li>
///     In combination with <code>MiSnapLicenseFeatureId</code> allows invoking Any ID to acquire an image of any supported identity document
///   </li>
///   <li>
///     Prevents capturing 2 sides of the same identity document and some unsupported documents
///   </li>
/// </ul>
  MiSnapLicenseFeatureODC = 5,
/// On-Device Extraction
/// When enabled, returns parsed information from supported identity documents
  MiSnapLicenseFeatureODE = 6,
/// Near Field Communication
/// Allows invoking MiSnapNFC SDK
  MiSnapLicenseFeatureNFC = 7,
/// Face
/// Allows invoking MiSnapFacialCapture SDK
  MiSnapLicenseFeatureFace = 8,
/// Voice
/// Allows invoking MiSnapVoiceCapture SDK
  MiSnapLicenseFeatureVoice = 9,
/// Enhanced Manual
/// When enabled, returns hints after processing a frame in Manual mode
  MiSnapLicenseFeatureEnhancedManual = 10,
};

enum MiSnapLicenseStatus : NSInteger;

SWIFT_CLASS("_TtC10MiSnapCore20MiSnapLicenseManager")
@interface MiSnapLicenseManager : NSObject
/// Singleton instance
/// @return The <code>MiSnapLicenseManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MiSnapLicenseManager * _Nonnull shared;)
+ (MiSnapLicenseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Destroys the singleton
+ (void)destroyShared;
/// License status.
/// @see <code>MiSnapLicenseStatus</code>
@property (nonatomic, readonly) enum MiSnapLicenseStatus status;
/// GPO (a private property internally used by Mitek)
@property (nonatomic, readonly, copy) NSString * _Nullable gpo;
/// A string representation of an expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expirationDateString;
/// Sets a base64 license key
- (void)setLicenseKey:(NSString * _Nullable)base64LicenseKey;
/// Returns whether a given feature is supported by a license key
- (BOOL)featureSupported:(enum MiSnapLicenseFeature)feature SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, MiSnapLicenseStatus, open) {
/// License status is not set
  MiSnapLicenseStatusNone = 0,
/// License is valid
  MiSnapLicenseStatusValid = 1,
/// License is tampered with
  MiSnapLicenseStatusNotValid = 2,
/// License is valid but expired
  MiSnapLicenseStatusExpired = 3,
/// License is valid but disabled
  MiSnapLicenseStatusDisabled = 4,
/// License is valid but an application bundle identifier is not supported
  MiSnapLicenseStatusNotValidAppId = 5,
/// License is valid but iOS platform is not licensed
  MiSnapLicenseStatusPlatformNotSupported = 6,
/// License is valid but a given feature is not supported
  MiSnapLicenseStatusFeatureNotSupported = 7,
};

@class MiSnapLogConfiguration;

SWIFT_CLASS("_TtC10MiSnapCore9MiSnapLog")
@interface MiSnapLog : NSObject
@property (nonatomic, strong) MiSnapLogConfiguration * _Nonnull configuration;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MiSnapLog * _Nonnull shared;)
+ (MiSnapLog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)destroyShared;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MiSnapLogConfiguration * _Nonnull configuration;)
+ (MiSnapLogConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfiguration:(MiSnapLogConfiguration * _Nonnull)value;
- (void)verbose:(NSString * _Nonnull)msg;
- (void)debug:(NSString * _Nonnull)msg;
- (void)info:(NSString * _Nonnull)msg;
- (void)warning:(NSString * _Nonnull)msg;
- (void)error:(NSString * _Nonnull)msg;
- (NSString * _Nonnull)getLogWithKeepFile:(BOOL)keepFile;
- (void)clearAllSavedLogFiles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MiSnapLogLevel : NSInteger;
enum MiSnapLogPresentation : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC10MiSnapCore22MiSnapLogConfiguration")
@interface MiSnapLogConfiguration : NSObject <NSCoding>
/// Level
@property (nonatomic) enum MiSnapLogLevel level;
/// Presentation
@property (nonatomic) enum MiSnapLogPresentation presentation;
/// Indicates whether PII should be saved
/// Default: <code>false</code>
@property (nonatomic) BOOL savePII;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

/// Log level
typedef SWIFT_ENUM(NSInteger, MiSnapLogLevel, open) {
/// Verbose
  MiSnapLogLevelVerbose = 0,
/// Debug
  MiSnapLogLevelDebug = 1,
/// Info
  MiSnapLogLevelInfo = 2,
/// Warning
  MiSnapLogLevelWarning = 3,
/// Error
  MiSnapLogLevelError = 4,
};

/// Log presentation
typedef SWIFT_ENUM(NSInteger, MiSnapLogPresentation, open) {
/// Only print logs in console
  MiSnapLogPresentationConsole = 0,
/// Only save logs to a file
  MiSnapLogPresentationFile = 1,
/// Print logs to console and save to file
  MiSnapLogPresentationConsoleAndFile = 2,
};

@class MiSnapMibiDeviceInfo;
@class MiSnapMibiSessionInfo;
enum MiSnapMibiDataElement : NSInteger;
@class UIImage;

/// MIBI
SWIFT_CLASS("_TtC10MiSnapCore10MiSnapMibi")
@interface MiSnapMibi : NSObject
/// JSON string representation of MIBI.
/// WARNING: Do not use/parse it for a purpose of collecting session analytics as this property is only for Mitek internal use. Use stable <code>sessionInfo</code> and <code>deviceInfo</code> properties for this purpose.
@property (nonatomic, copy) NSString * _Nullable string;
/// Device info
@property (nonatomic, readonly, strong) MiSnapMibiDeviceInfo * _Nonnull deviceInfo;
/// An array of session infos
@property (nonatomic, readonly, copy) NSArray<MiSnapMibiSessionInfo *> * _Nonnull sessionInfos;
/// Deep copy
@property (nonatomic, readonly, strong) MiSnapMibi * _Nonnull deepCopy;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set a module name and its version
- (void)setModuleWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version;
/// Set a session info dictionary
- (void)setSessionInfo:(NSDictionary<NSString *, id> * _Nonnull)sessionInfo resetOld:(BOOL)resetOld;
/// Set a value for MIBI data element
- (void)setWithValue:(NSString * _Nonnull)value for:(enum MiSnapMibiDataElement)element;
/// Set parameters
- (void)setParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters original:(BOOL)original;
/// Set UXP
/// Note, should always be called at the very end to finilize all internal MIBI objects
- (void)setUXP:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)events;
/// Add MIBI string to an image
- (NSData * _Nullable)addTo:(UIImage * _Nullable)image compression:(float)compression SWIFT_WARN_UNUSED_RESULT;
/// Add MIBI string to WAV data
- (NSData * _Nonnull)addTo:(NSData * _Nonnull)wavData SWIFT_WARN_UNUSED_RESULT;
@end


enum MiSnapMibiSessionInfoType : NSInteger;

/// Session info
SWIFT_CLASS("_TtC10MiSnapCore21MiSnapMibiSessionInfo")
@interface MiSnapMibiSessionInfo : NSObject
/// Type
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoType type;
/// Total duration
@property (nonatomic, readonly) NSInteger totalDuration;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MiSnapMibiSessionInfoMode : NSInteger;
enum MiSnapMibiSessionInfoOrientation : NSInteger;

/// Barcode session info
SWIFT_CLASS("_TtC10MiSnapCore28MiSnapMibiBarcodeSessionInfo")
@interface MiSnapMibiBarcodeSessionInfo : MiSnapMibiSessionInfo
/// Barcode type
@property (nonatomic, readonly, copy) NSString * _Nonnull barcodeType;
/// Mode
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoMode mode;
/// Device orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation deviceOrientation;
/// Document orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation documentOrientation;
/// JPEG quality
@property (nonatomic, readonly) NSInteger jpegQuality;
/// Auto tries
@property (nonatomic, readonly) NSInteger autoTries;
/// Manual tries
@property (nonatomic, readonly) NSInteger manualTries;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiBarcodeSessionInfo</code> from a dictionary
+ (MiSnapMibiBarcodeSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// MIBI data element
typedef SWIFT_ENUM(NSInteger, MiSnapMibiDataElement, open) {
/// MIBI version
  MiSnapMibiDataElementMibiVersion = 0,
/// Device info
  MiSnapMibiDataElementDeviceInfo = 1,
/// SDK info
  MiSnapMibiDataElementSdkInfo = 2,
/// Platform private
  MiSnapMibiDataElementPlatformPrivate = 3,
/// Session info
  MiSnapMibiDataElementSessionInfo = 4,
/// Device
  MiSnapMibiDataElementDevice = 5,
/// Manufacturer
  MiSnapMibiDataElementManufacturer = 6,
/// Model
  MiSnapMibiDataElementModel = 7,
/// Platfrom
  MiSnapMibiDataElementPlatform = 8,
/// OS
  MiSnapMibiDataElementOs = 9,
/// ID
  MiSnapMibiDataElementId = 10,
/// Modules
  MiSnapMibiDataElementModules = 11,
/// Name
  MiSnapMibiDataElementName = 12,
/// Version
  MiSnapMibiDataElementVersion = 13,
/// License
  MiSnapMibiDataElementLicense = 14,
/// GPO
  MiSnapMibiDataElementGpo = 15,
/// ExpiryDate
  MiSnapMibiDataElementExpiryDate = 16,
/// Parameters
  MiSnapMibiDataElementParameters = 17,
/// Original
  MiSnapMibiDataElementOriginal = 18,
/// Final
  MiSnapMibiDataElementFinal = 19,
/// UXP
  MiSnapMibiDataElementUxp = 20,
/// Result code
  MiSnapMibiDataElementResultCode = 21,
/// Image width
  MiSnapMibiDataElementImageWidth = 22,
/// Image height
  MiSnapMibiDataElementImageHeight = 23,
/// Orientation
  MiSnapMibiDataElementOrientation = 24,
/// Classification document type
  MiSnapMibiDataElementClassificationDocumentType = 25,
};


/// Device info
SWIFT_CLASS("_TtC10MiSnapCore20MiSnapMibiDeviceInfo")
@interface MiSnapMibiDeviceInfo : NSObject
/// Manufacturer
@property (nonatomic, readonly, copy) NSString * _Nonnull manufacturer;
/// Device (i.e. iPhone or iPad)
@property (nonatomic, readonly, copy) NSString * _Nonnull device;
/// Model
@property (nonatomic, readonly, copy) NSString * _Nonnull model;
/// OS
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Document session info
SWIFT_CLASS("_TtC10MiSnapCore29MiSnapMibiDocumentSessionInfo")
@interface MiSnapMibiDocumentSessionInfo : MiSnapMibiSessionInfo
/// Doc type
@property (nonatomic, readonly, copy) NSString * _Nonnull docType;
/// Mode
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoMode mode;
/// Device orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation deviceOrientation;
/// Document orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation documentOrientation;
/// JPEG quality
@property (nonatomic, readonly) NSInteger jpegQuality;
/// Auto tries
@property (nonatomic, readonly) NSInteger autoTries;
/// Manual tries
@property (nonatomic, readonly) NSInteger manualTries;
/// Enhanced manual
@property (nonatomic, readonly) BOOL enhancedManual;
/// Classification type
@property (nonatomic, readonly, copy) NSString * _Nullable classificationType;
/// Four corners
@property (nonatomic, readonly, copy) NSArray<NSArray<NSNumber *> *> * _Nullable fourCorners;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable warnings;
/// MRZ extracted
@property (nonatomic, readonly) BOOL mrzExtracted;
/// Optional data redacted
@property (nonatomic, readonly) BOOL optionalDataRedacted;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiDocumentSessionInfo</code> from a dictionary
+ (MiSnapMibiDocumentSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face session info
SWIFT_CLASS("_TtC10MiSnapCore25MiSnapMibiFaceSessionInfo")
@interface MiSnapMibiFaceSessionInfo : MiSnapMibiSessionInfo
/// Mode
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoMode mode;
/// Smile
@property (nonatomic, readonly) BOOL smile;
/// Device orientation
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoOrientation deviceOrientation;
/// JPEG quality
@property (nonatomic, readonly) NSInteger jpegQuality;
/// Auto tries
@property (nonatomic, readonly) NSInteger autoTries;
/// Manual tries
@property (nonatomic, readonly) NSInteger manualTries;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable warnings;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiFaceSessionInfo</code> from a dictionary
+ (MiSnapMibiFaceSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum MiSnapMibiSessionInfoUnlock : NSInteger;

/// NFC session info
SWIFT_CLASS("_TtC10MiSnapCore24MiSnapMibiNFCSessionInfo")
@interface MiSnapMibiNFCSessionInfo : MiSnapMibiSessionInfo
/// Tries
@property (nonatomic, readonly) NSInteger tries;
/// Unlock mechanism
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoUnlock unlock;
/// Chip Authentication
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable ca;
/// Data groups
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable dgs;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSArray<NSString *> *> * _Nullable warnings;
/// Document code
@property (nonatomic, readonly, copy) NSString * _Nullable documentCode;
/// Issuing country
@property (nonatomic, readonly, copy) NSString * _Nullable issuingCountry;
/// Issue date
@property (nonatomic, readonly, copy) NSString * _Nullable issueDate;
/// Nationality
@property (nonatomic, readonly, copy) NSString * _Nullable nationality;
/// Optional data redacted
@property (nonatomic, readonly) BOOL optionalDataRedacted;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiNFCSessionInfo</code> from a dictionary
+ (MiSnapMibiNFCSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Session info flow
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoFlow, open) {
/// Flow is not set
  MiSnapMibiSessionInfoFlowNone = 0,
/// Enrollment
  MiSnapMibiSessionInfoFlowEnrollment = 1,
/// Verification
  MiSnapMibiSessionInfoFlowVerification = 2,
};

/// Session info mode
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoMode, open) {
/// Mode is not set
  MiSnapMibiSessionInfoModeNone = 0,
/// Auto
  MiSnapMibiSessionInfoModeAuto = 1,
/// Manual
  MiSnapMibiSessionInfoModeManual = 2,
/// Forced auto
  MiSnapMibiSessionInfoModeForcedAuto = 3,
};

/// Session info orientation
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoOrientation, open) {
/// Orientation is not set
  MiSnapMibiSessionInfoOrientationNone = 0,
/// Portrait
  MiSnapMibiSessionInfoOrientationPortrait = 1,
/// Landscape
  MiSnapMibiSessionInfoOrientationLandscape = 2,
};

/// Session info type
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoType, open) {
/// Type is not set
  MiSnapMibiSessionInfoTypeNone = 0,
/// Document
  MiSnapMibiSessionInfoTypeDocument = 1,
/// Barcode
  MiSnapMibiSessionInfoTypeBarcode = 2,
/// Face
  MiSnapMibiSessionInfoTypeFace = 3,
/// Voice
  MiSnapMibiSessionInfoTypeVoice = 4,
/// NFC
  MiSnapMibiSessionInfoTypeNfc = 5,
};

/// Session info chip unlock mechanism
typedef SWIFT_ENUM(NSInteger, MiSnapMibiSessionInfoUnlock, open) {
/// Unlock mechanism is not set
  MiSnapMibiSessionInfoUnlockNone = 0,
/// PACE
  MiSnapMibiSessionInfoUnlockPace = 1,
/// CA
  MiSnapMibiSessionInfoUnlockCa = 2,
/// BAC
  MiSnapMibiSessionInfoUnlockBac = 3,
};


/// Voice session info
SWIFT_CLASS("_TtC10MiSnapCore26MiSnapMibiVoiceSessionInfo")
@interface MiSnapMibiVoiceSessionInfo : MiSnapMibiSessionInfo
/// Flow
@property (nonatomic, readonly) enum MiSnapMibiSessionInfoFlow flow;
/// Tries
@property (nonatomic, readonly) NSInteger tries;
/// Warnings
@property (nonatomic, readonly, copy) NSArray<NSArray<NSString *> *> * _Nullable warnings;
/// SNR
@property (nonatomic, readonly) float snr;
/// Speech duration
@property (nonatomic, readonly) NSInteger speechDuration;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Creates <code>MiSnapMibiVoiceSessionInfo</code> from a dictionary
+ (MiSnapMibiVoiceSessionInfo * _Nonnull)from:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(NSInteger, MiSnapUxpEvent, open) {
  MiSnapUxpEventNone = 0,
  MiSnapUxpEventCheckFrontFailure = 1,
  MiSnapUxpEventCheckBackFailure = 2,
  MiSnapUxpEventIdentityFrontFailure = 3,
  MiSnapUxpEventIdentityBackFailure = 4,
  MiSnapUxpEventPassportFailure = 5,
  MiSnapUxpEventNotFoundFailure = 6,
  MiSnapUxpEventMrzFailure = 7,
  MiSnapUxpEventContrastFailure = 8,
  MiSnapUxpEventBackgroundFailure = 9,
  MiSnapUxpEventAngleFailure = 10,
  MiSnapUxpEventRotationAngleFailure = 11,
  MiSnapUxpEventTooFarFailure = 12,
  MiSnapUxpEventTooCloseFailure = 13,
  MiSnapUxpEventAspectRatioFailure = 14,
  MiSnapUxpEventSharpnessFailure = 15,
  MiSnapUxpEventBrightnessFailure = 16,
  MiSnapUxpEventMaxBrightnessFailure = 17,
  MiSnapUxpEventGlareFailure = 18,
  MiSnapUxpEventClassificationInProgress = 19,
  MiSnapUxpEventFaceNotFoundFailure = 20,
  MiSnapUxpEventFaceNotCenteredFailure = 21,
  MiSnapUxpEventFaceMultipleFacesFailure = 22,
  MiSnapUxpEventFaceRollFailure = 23,
  MiSnapUxpEventFacePitchFailure = 24,
  MiSnapUxpEventFaceYawFailure = 25,
  MiSnapUxpEventFaceTooFarFailure = 26,
  MiSnapUxpEventFaceTooCloseFailure = 27,
  MiSnapUxpEventFaceNotStillFailure = 28,
  MiSnapUxpEventFaceStopSmilingFailure = 29,
  MiSnapUxpEventHoldStill = 30,
  MiSnapUxpEventSmile = 31,
  MiSnapUxpEventErrorVerbose = 32,
  MiSnapUxpEventSuccessVerbose = 33,
  MiSnapUxpEventTimeoutVerbose = 34,
  MiSnapUxpEventStartVerbose = 35,
  MiSnapUxpEventReadVerbose = 36,
  MiSnapUxpEventUnknownTagVerbose = 37,
  MiSnapUxpEventPaceSupportVerbose = 38,
  MiSnapUxpEventCaSupportVerbose = 39,
  MiSnapUxpEventAaSupportVerbose = 40,
  MiSnapUxpEventAccessMechanismVerbose = 41,
  MiSnapUxpEventDiscardVerbose = 42,
  MiSnapUxpEventCancelVerbose = 43,
  MiSnapUxpEventCancel = 44,
  MiSnapUxpEventInstruction = 45,
  MiSnapUxpEventHelp = 46,
  MiSnapUxpEventTimeout = 47,
  MiSnapUxpEventReview = 48,
  MiSnapUxpEventMeasuredConfidence = 49,
  MiSnapUxpEventMeasuredCornerPoints = 50,
  MiSnapUxpEventMeasuredMicrConfidence = 51,
  MiSnapUxpEventMeasuredContrast = 52,
  MiSnapUxpEventMeasuredBackground = 53,
  MiSnapUxpEventMeasuredAngle = 54,
  MiSnapUxpEventMeasuredRotationAngle = 55,
  MiSnapUxpEventMeasuredSharpness = 56,
  MiSnapUxpEventMeasuredBrightness = 57,
  MiSnapUxpEventMeasuredGlare = 58,
  MiSnapUxpEventMeasuredWidth = 59,
  MiSnapUxpEventMeasuredAutoTime = 60,
  MiSnapUxpEventMeasuredManualTime = 61,
  MiSnapUxpEventMeasuredFailover = 62,
  MiSnapUxpEventTorchOn = 63,
  MiSnapUxpEventTorchOff = 64,
  MiSnapUxpEventStartAuto = 65,
  MiSnapUxpEventStartManual = 66,
  MiSnapUxpEventOrientationLandscape = 67,
  MiSnapUxpEventOrientationPortrait = 68,
};


SWIFT_CLASS("_TtC10MiSnapCore21MiSnapUxpEventManager")
@interface MiSnapUxpEventManager : NSObject
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nonnull events;
@property (nonatomic, readonly) NSInteger totalDuration;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MiSnapUxpEventManager * _Nonnull shared;)
+ (MiSnapUxpEventManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)destroyShared;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)addEvent:(enum MiSnapUxpEvent)event;
- (void)addEvent:(enum MiSnapUxpEvent)event value:(NSString * _Nullable)value;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
