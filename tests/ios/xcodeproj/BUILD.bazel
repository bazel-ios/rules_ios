load("//rules:xcodeproj.bzl", "xcodeproj")
load("//rules:additional_scheme_info.bzl", "additional_scheme_info")

xcodeproj(
    name = "Single-Static-Framework-Project",
    testonly = True,
    additional_scheme_infos = [
        ":ObjcFrameworkSchemeInfo",
    ],
    bazel_path = "bazelisk",
    # Not that 'configs' must hold names for configs present in your .bazelrc file
    # in order to build with the respective Xcode build configurations active
    configs = [
        "bar",
        "foo",
    ],
    generate_schemes_for_product_types = [
        "framework.static",
        "bundle.unit-test",
    ],
    include_transitive_targets = True,
    project_attributes_overrides = {"ORGANIZATIONNAME": "rules_ios"},
    deps = [
        "//tests/ios/frameworks/objc:ObjcFramework",
        "//tests/ios/frameworks/objc:ObjcFrameworkTests",
    ],
)

additional_scheme_info(
    name = "ObjcFrameworkSchemeInfo",
    testonly = True,
    build_target = "//tests/ios/frameworks/objc:ObjcFramework",
    test_action_targets = [
        "//tests/ios/frameworks/objc:ObjcFrameworkTests",
    ],
    test_environment = {
        "ENV1": "/tmp/dir",
        "ENV2": "üçå",
    },
)

xcodeproj(
    name = "Test-Imports-App-Project",
    testonly = True,
    additional_post_actions = {
        "build": [
            "echo 'post_build_action_1'",
            "echo 'post_build_action_2'",
        ],
    },
    additional_pre_actions = {
        "build": [
            "echo 'pre_build_action_1'",
            "echo 'pre_build_action_2'",
        ],
    },
    bazel_path = "bazelisk",
    generate_schemes_for_product_types = ["application"],
    include_transitive_targets = False,
    deps = [
        "//tests/ios/unit-test/test-imports-app:TestImports-App",
        "//tests/ios/unit-test/test-imports-app:TestImports-App_framework_unlinked",
        "//tests/ios/unit-test/test-imports-app:TestImports-Unit-Tests",
    ],
)

xcodeproj(
    name = "Test-MultipleConfigs-Project",
    bazel_path = "bazelisk",
    generate_schemes_for_product_types = ["application"],
    include_transitive_targets = False,
    deps = [
        "//tests/ios/app:App",
        "//tests/ios/app:FW",
        "//tests/ios/app:FW2",
    ],
)

xcodeproj(
    name = "Test-MultipleConfigs-Project-WithTransitiveFlag",
    bazel_path = "bazelisk",
    generate_schemes_for_product_types = ["application"],
    include_transitive_targets = True,
    deps = [
        "//tests/ios/app:App",
        "//tests/ios/app:FW",
        "//tests/ios/app:FW2",
    ],
)

# Test that the test_host is included when using "include_transitive_targets = True"
xcodeproj(
    name = "Test-With-Host-App",
    testonly = True,
    bazel_path = "bazelisk",
    generate_schemes_for_product_types = [
        "application",
        "bundle.unit-test",
        "test_suite",
    ],
    include_transitive_targets = True,
    project_name = "TestWithHostApp",  # Test that setting a custom project name works as expected
    deps = [
        "//tests/ios/unit-test:ExplicitHosted",
    ],
)

genrule(
    name = "Test-Project-Regeneration-For-Single-Static-Framework",
    testonly = True,
    outs = ["Test-Project-Regeneration-For-Single-Static-Framework.sh"],
    cmd = """
cat <<'EOS' > $@
#!/bin/sh
set -euxo pipefail
rm -fr {package_name}/{target_name}.xcodeproj
bazelisk run {package_name}:{target_name}
bazelisk run {package_name}:{target_name}
EOS
    """.format(
        package_name = package_name(),
        target_name = "Single-Static-Framework-Project",
    ),
    executable = True,
    tools = [":Single-Static-Framework-Project"],
)

genrule(
    name = "Test-Project-Regeneration-For-Test-Imports-App-Project",
    testonly = True,
    outs = ["Test-Project-Regeneration-For-Test-Imports-App-Project.sh"],
    cmd = """
cat <<'EOS' > $@
#!/bin/sh
set -euxo pipefail
rm -fr {package_name}/{target_name}.xcodeproj
bazelisk run {package_name}:{target_name}
bazelisk run {package_name}:{target_name}
EOS
    """.format(
        package_name = package_name(),
        target_name = "Test-Imports-App-Project",
    ),
    executable = True,
    tools = [":Test-Imports-App-Project"],
)

xcodeproj(
    name = "Test-With-Host-App-With-AdditionalPrebuildScript",
    additional_prebuild_script = "echo 'DoSomething'",
    bazel_path = "bazelisk",
    generate_schemes_for_product_types = ["application"],
    include_transitive_targets = True,
    deps = [
        "//tests/ios/app:App",
        "//tests/ios/app:FW",
        "//tests/ios/app:FW2",
    ],
)

xcodeproj(
    name = "Test-BuildForDevice-Project",
    additional_bazel_build_options = [
        "--ios_multi_cpus=arm64",
        # So no signing identity check happens when building :AppWithProvisioningProfile
        # since it depends on ':integration-test.mobileprovision' which is a fake
        # provisioning profile used only for testing
        "--ios_signing_cert_name=-",
    ],
    bazel_path = "bazelisk",
    generate_schemes_for_product_types = ["application"],
    include_transitive_targets = True,
    deps = [
        "//tests/ios/app:AppWithProvisioningProfile",
        "//tests/ios/app:FW",
        "//tests/ios/app:FW2",
    ],
)
