load("//rules:framework.bzl", "apple_framework")
load("@rules_proto_grpc//objc:defs.bzl", "objc_proto_compile")
load("@rules_proto_grpc//internal:filter_files.bzl", "filter_files")

## This macro generates a apple_framework _per_ proto_srcs

def apple_proto_framework(name, proto_srcs, use_proto_map = True, deps = []):
    native.proto_library(
        name = name + "_proto",
        srcs = proto_srcs,
        # Internal implementation detail: assume all deps are protos
        deps = [d + "_proto" for d in deps],
    )

    # proto_map.txt needs to correspend with the names used in rules_ios, this
    # allows the devs to import them as as such
    if use_proto_map:
        extra_protoc_args = [
            "--objc_opt",
            # In-practice this might be generated by a repository_rule or a
            # build rule - in that case just put the file here:
            # e.g. external/my_protos/proto_map.txt
            "named_framework_to_proto_path_mappings_path=tests/ios/frameworks/protos/proto_map.txt",
        ]
        extra_protoc_files = [
            "proto_map.txt",
        ]
    else:
        extra_protoc_args = []
        extra_protoc_files = []

    objc_proto_compile(
        name = name + "_objc_proto",
        protos = [name + "_proto"],
        extra_protoc_args = extra_protoc_args,
        extra_protoc_files = extra_protoc_files,
        verbose = 2,
    )

    # Filter files to sources and headers
    filter_files(
        name = name + ".pbobjc.m",
        target = name + "_objc_proto",
        extensions = ["m"],
    )

    # This has to correspond with rules_ios
    filter_files(
        name = name + ".pbobjc.h",
        target = name + "_objc_proto",
        extensions = ["h"],
    )

    apple_framework(
        name = name,
        srcs = [name + ".pbobjc.m", name + ".pbobjc.h"],
        objc_defines = ["GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1"],
        swift_defines = ["GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1"],
        deps = [":Protobuf"] + deps,
        platforms = {"ios": "10.0"},
        visibility = ["//visibility:public"],
    )
